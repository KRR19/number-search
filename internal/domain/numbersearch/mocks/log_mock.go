// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// SortedNumbers mocks base method.
func (m *MockStore) SortedNumbers() ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortedNumbers")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SortedNumbers indicates an expected call of SortedNumbers.
func (mr *MockStoreMockRecorder) SortedNumbers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortedNumbers", reflect.TypeOf((*MockStore)(nil).SortedNumbers))
}

// LoggerMock is a mock of Logger interface.
type LoggerMock struct {
	ctrl     *gomock.Controller
	recorder *LoggerMockMockRecorder
}

// LoggerMockMockRecorder is the mock recorder for LoggerMock.
type LoggerMockMockRecorder struct {
	mock *LoggerMock
}

// NewLoggerMock creates a new mock instance.
func NewLoggerMock(ctrl *gomock.Controller) *LoggerMock {
	mock := &LoggerMock{ctrl: ctrl}
	mock.recorder = &LoggerMockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *LoggerMock) EXPECT() *LoggerMockMockRecorder {
	return m.recorder
}

// ErrorContext mocks base method.
func (m *LoggerMock) ErrorContext(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ErrorContext", varargs...)
}

// ErrorContext indicates an expected call of ErrorContext.
func (mr *LoggerMockMockRecorder) ErrorContext(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorContext", reflect.TypeOf((*LoggerMock)(nil).ErrorContext), varargs...)
}

// InfoContext mocks base method.
func (m *LoggerMock) InfoContext(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InfoContext", varargs...)
}

// InfoContext indicates an expected call of InfoContext.
func (mr *LoggerMockMockRecorder) InfoContext(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoContext", reflect.TypeOf((*LoggerMock)(nil).InfoContext), varargs...)
}

// WarnContext mocks base method.
func (m *LoggerMock) WarnContext(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WarnContext", varargs...)
}

// WarnContext indicates an expected call of WarnContext.
func (mr *LoggerMockMockRecorder) WarnContext(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnContext", reflect.TypeOf((*LoggerMock)(nil).WarnContext), varargs...)
}
